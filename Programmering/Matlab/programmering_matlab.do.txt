TITLE: Introduksjon til Python
# AUTHOR: Kristine B. Hein
# DATE: today
*En kort innføring i installasjon og programmering i bildebehandling.*


TOC: on

!split
======= Installasjon =======
Matlab krever en lisens for å kjøres (som koster svimlende 18500kr!).
Som student ved UiO har man tilgang til en lisens som gjør det mulig å laste ned Matlab på egen PC, eller bruke Matlab gjennom UiOs "programkiosk":"http://www.uio.no/tjenester/it/maskin/programvare/programkiosk/".


===== Nedlastning til egen PC =====

* 1) Gå inn på "mathworks":"https://se.mathworks.com/login" og registrer en bruker med din UiO-mail som brukernavn.
* 2) Trykk _Associato to license_ og skriv inn *13796-65616-24271-45993-03655*.
* 3) Nå kan du laste ned Matlab ved å trykke på _Download Your Products now_ og følge de gitte instruksjonene for den platformen du laster ned på.

<linebreak>
Tips til Linux-brukere: Det kan hende Matlab har en keybinding som minner om Emacs. Det vil si, at typiske kommandoer som f.eks Ctrl+S for lagring, Ctrl+C og Ctrl+V for hhv. kopiering og lagring gjør noe annet enn det man kanskje er vant til.
For å endre denne keybindingen, går man på _Preferences_ -> _Keyboard_ -> _Shortcuts_. Under _Active settings_ kan du finne en drop-down meny med mulighetene for *Emacs Default Set* eller *Windows Default Set*. Ved å bruke *Windows Default Set*, vil det være mulig å bruke de typiske kommandoene som Ctrl+C, Ctrl+V osv.

======= Programmering =======
Her kan du finne demonstrasjoner av syntaksen som brukes i Matlab, samt et eksempel på hvordan et program kan utføre operasjoner på et bilde.

===== Grunnleggende =====
Matlab er et høytnivåspråk - hvilket som betyr at Matlab er ment for å være lett å lese.

Mye av semantikken i Matlab bygger også på at man jobber med matriser. Bilder er i bunn og grunn matriser - hvilket som gjør Matlab ganske naturlig egnet til å jobbe med bilder i.

Et program i Matlab har filendingen .m, og kjøres i kommandovinduet ("Command Window") ved å skrive
!bc
<navn på programmet ditt>
!ec

I alle Matlab-program er det viktig å huske et semikolon (;) i slutten av hver linje som du ikke ønsker å se verdien til.
Det kan fort bli mye utskrift, spesielt ved store matriser. Er man uheldig og glemmer et semikolon, kan man avslutte utskriften ved å trykke Ctrl+C.

=== Matematikk ===
Vi kommer til å bruke en del aritmetiske operasjoner (dvs addering,subtrahering,divisjon og multiplikasjon) etterhvert, og da kan det være fint å kjenne til dem.
Syntaksen for aritmetiske operasjoner er nokså lik som i Java/C/C++/Matlab.

Programmet under demonsterer aritmetiske operasjoner, samt potens siden den skiller seg nokså ut fra de nevnte språkene.

@@@CODE aritmetikk.m
## Programmet kan lastes ned "her":"https://github.com/krisbhei/INF2310/raw/master/Programmering/Python/aritmetikk.py" (høyreklikk og trykk "lagre lenke som"/"save link as")

=== Cell arrays ===
Cell arrays er en samling av elementer. Det som gjør cell arrays spesielt i Matlab sammenlignet med Java eller C/C++, er at arrays-ene kan inneholde elementer av ulik type.
Det vil si at én og samme cell-array i Matlab kan inneholde datatyper som strings, ints og floats og andre ting som for eksempel funksjonspekere og andre objekter.

For å lage en tom cell, brukes krøllparantes:
!bc matlab
cell1 = {}
!ec

Man kan utvide *cell1* ved å spesifisere på hvilken plass et nytt element skal settes inn.
Husk at Matlab begynner indekseringen fra 1, og bruker krøllparantes!
!bc matlab
cell1{1} = 10; # Nå har liste kun ett element - nemlig 10
cell1{2} = 12; # Elementet 12 er nå plassert bak 10
!ec

<linebreak>
For å lage en cell arrays som inneholder gitte elementer, brukes krøllparantes rundt elementene separert med komma:

!bc matlab
a = 1
b = @sum # alpha-tegnet sørger for at b er en funksjonspeker til den innebygde funksjonen sum
c = 'hei'

cell2 = {a,b,c}
!ec

Når man skal hente ut elementer fra en cell array, er det viktig å huske at første element ligger på 1-te plass (i motsetning til Python der første element ligger på 0-te plass).
For å hente ut et element fra en cell array, skriver vi først navnet til variabelen knyttet til array-et, og deretter krøllparantes med et tall inni som forteller fra hvilken plass programmet skal hente elementet fra.
!bc matlab
cell1{1} # viser 10 i kommandovinduet
cell2{3} # viser 'hei' i kommandovinduet
!ec

=== Løkker ===
Løkker har noenlunde lik syntaks som de typiske programmeringsspråkene.

<linebreak>
__For-løkker:__
<linebreak>
Hensikten bak en for-løkke er å utføre en kodesnutt et bestemt antall ganger.

For-løkker er kanskje én av de viktigste redskapene som kommer til å bli brukt i emnet.
Derfor, er det viktig å ha god kjennskap til hvordan den kan brukes og *spesielt* indekseringen!

Konstruksjonen av en for-løkke er:
!bc matlab
for <variabel> = <startverdi>:<steg>:<sluttverdi>
% Kode som skal utføres
end
!ec

Det som er viktig å huske på, er end. Den brukes også for å markere slutten av if-tester og funksjonsdefinisjoner.
Det er også mulig å droppe å spesifisere *steg* hvis man ønsker at det skal være lik 1. Syntaksten blir da
!bc matlab
for <variabel> = <startverdi>:<sluttverdi>
% Kode som skal utføres
end
!ec

__While-løkker:__
<linebreak>
Det hender også at man ikke vet på forhånd hvor mange ganger en kodesnutt skal utføres av programmet. Dette kan f.eks være ved fjerning av piksler som vi ikke ønsker i bildet og søk etter noe i bildet.

En while-løkke er konstruert slik:
!bc matlab
while <en betingelse er  evaluert til True>
% kodesnutt som skal utføres
end
!ec

En betingelse kan være en sjekk på om ett tall er større enn en gitt verdi, om en variabel har endret seg osv.

=== Matriser ===

En matrise konstrueres radvis, og inni klammeparanteser. En rad er definert som en rekke av verdier sperarert av mellomrom.
For å indikere slutt av en rad, brukes semikolon. Et eksempel på konstruksjon av en 3 x 2 - matrise:
!bc matlab
matrise1 = [1 2 3; 4 5 6];
!ec
som ser ut slik i kommandovinduet:
!bc
matrise1 =

     1     2     3
     4     5     6
!ec
Merk at for at matrisen skal være veldefinert, må radene være like lange (altså bestå av like mange verdier).

Programmet under viser grunnleggende operasjoner man kan gjøre med en matrise:
@@@CODE matrise_operasjoner.m
## Programmet kan lastes ned "her":"https://github.com/krisbhei/INF2310/raw/master/Programmering/Python/aritmetikk.py" (høyreklikk og trykk "lagre lenke som"/"save link as")


=== Nyttige(?) funksjoner ===
Det finnes uttallige mange funksjoner i Matlab som er nyttig i
<linebreak>
Noen metoder som, av erfaring, har vært til nytte i bildebehandling:
* _np.array:_ Konverterer en liste til array
* _np.dot:_ Matematisk matrisemultiplikasjon
* _np.where:_ Lager en boolsk array (en array av True og False) av *hvor* i en matrise en gitt betingelse er oppfylt
* _np.loadtxt:_ Leser inn og konverterer en fil med verdier til en array i programmet
* _np.savetxt:_ Skriver en array til fil
Dokumentasjonen ligger "her":"https://docs.scipy.org/doc/numpy/reference/" med en oversikt over alle metodene fra numpymodulen, og hvordan de brukes.


===== Bildebehandling  =====
Det er mange ulike teknikker (og moduler!) en kan bruke for å arbeide med bilder i Python. Her vil det presenteres én metode å arbeide med bilder på, men
du står selvføgelig fritt til å bruke teknikkene og modulene du øsnker å jobber med.

=== Innlesing og lagring av bilde ===
Innlesing av bilde er ikke implementert i numpy. Men det finnes heldigvis andre moduler som har innlesing av bilde implementert, som f.eks OpenCV, scikit, PIL og scipy(som vil brukes her).

Det går også an å lese inn bilde fra matplotlib.pyplot, som ofte brukes ved plotting og framvising av bilde, men den har ingen metode implementert som kan konvertere et fargebilde til gråtonebilde.
Det er hovedsakelig gråtonebilder det blir fokusert på i emnet, og derav er det kjekt å kunne konvertere et fargebilde.

<linebreak>
En modul som har implementert funksojner for innlesing og gråtonekonvertering av bilder, er *scipy.misc*.
Funksjonen for innlesing heter *imread*. For å lese inn et bilde, f.eks "houses.png":"https://github.com/krisbhei/INF2310/raw/master/Programmering/Python/houses.png", kan man bruke *imread* slik:
!bc pycod
from scipy.misc import imread
img = imread("houses.png",flatten=True)
!ec

Argumentet *flatten=True* i *imread* sørger for at bildet er konvertert til gråtone. Et fargebilde har tre dimensjoner, mens et gråtonebilde har to.
For å se om et innlest bilde faktisk er gråtone, kan man f.eks bruke
!bc
print(length(img.shape))
!ec
der *shape* returnerer en liste med verdier som forteller hvor stor matrisen *img* er. Er matrisen 3-dimensjonal vil listen være 3 elementer lang, og er den 2-dimensjonal vil listen være 2 elementer lang.

=== Fremvising av bilde ===
Nå som et bilde har blitt innlest, er det fint å få se det også. Dette kommer til å være *svært* nyttig for å se hvordan diverse operasjoner påvirker et bilde.

Modulen *matplotlib.pyplot* har metoder som egner seg godt til all form for visualisering av data - også for bilder. For å vise fram et bilde bruken en *imshow*.

Programmet under demonstrer hvordan et program kan lese inn et bilde og vise det fram i egne vindu.
@@@CODE fremvising.py
Programmet kan lastes ned "her":"https://github.com/krisbhei/INF2310/raw/master/Programmering/Python/fremvising.py" (høyreklikk og trykk "lagre lenke som"/"save link as")

som gir disse bildene:

FIGURE: [Figure_1.svg] Bilde av det første vinduet.

FIGURE: [Figure_2.svg] Bilde av det andre vinduet.

Her kan du se at det første bilde ikke er gråtone - selvom det er tenkt et gråtonebilde. Dette skjer fordi *matplotlib.pyplot* har en standard, predefinert måte å fremvise tallverdier som farger på.
Det må spesifiseres at en ønsker å framvise bildet som faktisk gråtone. Dette gjøres med å spesifisere et *colormap* ved å sende inn som argument *cmap=<ønsket colormap>*. Det finnes flere colormaps, hvis en ønsker å bruke det.

Dette er også viktig å bruke _figure()_ hvis man ikke ønsker at det nye bildet som fremvises overlapper bildet som tidligere har blitt sendt inn til *imshow*.

<linebreak>
Det kan også hende at etter noen operasjoner at de matrisene en jobber med, har verdier som er større enn det et bilde bør ha. Et 8-bit bilde har verdier fra 0 til og med 255.
Ved fremvising, tilpasser matplotlib seg etter de verdiene som den innsendte matrisen har. Dette kan føre til at vi ikke ser resultatene etter å ha utført noen operasjoner.
For å sørge for at matplotlib viser bildet som om den har verdier mellom 0 og 255, må en bruke *vmin* og *vmax*:
!bc pycod
plt.imshow(img,vmin=0,vmax=255)
!ec

<linebreak>
Noen ganger kan bildet se lite ut i vinduet. Det er mulig at matplotlib skalerer bildet slik at det fyller hele vinduet. Det gjøres slik:
!bc pycod
plt.imshow(<bilde og andre argumenter>, aspect='auto')
!ec
=== En liten demonstrasjon ===
label{subsec:demo}
Denne demonstrasjonen oppsummerer det som har vært beskrevet i denne innledningen. Dette er kanskje en av de funksjonskallene som vil bli brukt i programmene, og som er ganske nyttige
for å se hvordan et bilde forandrer seg i løpet av et program.

Bildebehandling er et fag der eksperimentering er viktig, og da er det nyttig å vise fram og presentere resultatene programmet har fått.

@@@CODE demo.py
Programmet kan lastes ned "her":"https://github.com/krisbhei/INF2310/raw/master/Programmering/Python/demo.py" (høyreklikk og trykk "lagre lenke som"/"save link as")

God programmering!

## doconce format html programmering_python.do.txt --html_style=bootswatch_yeti --pygments_html_style=friendly --html_admon=bootstrap_panel --html_output=programmering_python  --html_code_style=inherit --html_body_style=font-size:16px;
## doconce replace 'Table of contents' 'Oversikt' programmering_python.html
## doconce replace 'Contents' 'Innhold' programmering_python.html
## doconce format pdflatex programmering_python --latex_font=palatino --latex_admon=yellowicon '--latex_admon_color=yellow!5' --latex_fancy_header --latex_code_style=pyg --latex_section_headings=blue --latex_colored_table_rows=blue
##        --latex_admon=yellowicon '--latex_admon_color=yellow!5'
##        --latex_fancy_header --latex_code_style=pyg
##        --latex_section_headings=blue --latex_colored_table_rows=blue
